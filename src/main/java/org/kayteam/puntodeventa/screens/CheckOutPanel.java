/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.kayteam.puntodeventa.screens;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.geom.Rectangle2D;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import static java.awt.print.Printable.NO_SUCH_PAGE;
import static java.awt.print.Printable.PAGE_EXISTS;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.IOException;
import java.text.DecimalFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.MediaPrintableArea;
import javax.print.attribute.standard.MediaSize;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import org.kayteam.puntodeventa.objects.Product;
import org.kayteam.puntodeventa.objects.Sale;
import org.kayteam.puntodeventa.objects.SaleProduct;

/**
 *
 * @author segun
 */
public class CheckOutPanel extends javax.swing.JFrame {

    /**
     * Creates new form CheckOutPanel
     */
    public CheckOutPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        goBackButton = new javax.swing.JButton();
        removeProductButton = new javax.swing.JButton();
        addMoneyButton = new javax.swing.JButton();
        productCodeInput = new javax.swing.JTextField();
        productCodeText = new javax.swing.JLabel();
        totalCostText = new javax.swing.JLabel();
        finishCheckOutButton = new javax.swing.JButton();
        clearCheckOutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descripción", "Cantidad", "Precio uni.", "Precio total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productsTable);

        goBackButton.setFont(new Font("Arial", Font.PLAIN, 20));
        goBackButton.setText("Volver");
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });

        removeProductButton.setFont(new Font("Arial", Font.PLAIN, 20));
        removeProductButton.setText("Eliminar producto");
        removeProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProductButtonActionPerformed(evt);
            }
        });

        addMoneyButton.setFont(new Font("Arial", Font.PLAIN, 20));
        addMoneyButton.setText("Agregar producto manualmente");
        addMoneyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMoneyButtonActionPerformed(evt);
            }
        });

        productCodeInput.setFont(new Font("Arial", Font.PLAIN, 20));
        productCodeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productCodeInputActionPerformed(evt);
            }
        });
        productCodeInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productCodeInputKeyPressed(evt);
            }
        });

        productCodeText.setFont(new Font("Arial", Font.PLAIN, 20));
        productCodeText.setText("Código del producto");

        totalCostText.setFont(new Font("Arial", Font.PLAIN, 20));
        totalCostText.setText("Costo total: $0");

        finishCheckOutButton.setFont(new Font("Arial", Font.PLAIN, 20));
        finishCheckOutButton.setText("Terminar compra");
        finishCheckOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishCheckOutButtonActionPerformed(evt);
            }
        });

        clearCheckOutButton.setFont(new Font("Arial", Font.PLAIN, 20));
        clearCheckOutButton.setText("Vaciar carrito");
        clearCheckOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCheckOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(productCodeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productCodeText)
                    .addComponent(totalCostText)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(clearCheckOutButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(goBackButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(removeProductButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addMoneyButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(finishCheckOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(productCodeText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(productCodeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(totalCostText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(finishCheckOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearCheckOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(removeProductButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addMoneyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(goBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_goBackButtonActionPerformed

    private void removeProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProductButtonActionPerformed
        // TODO add your handling code here:
        removeProduct();
    }//GEN-LAST:event_removeProductButtonActionPerformed

    private void addMoneyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMoneyButtonActionPerformed
        // TODO add your handling code here:
        addMoneyManual();
    }//GEN-LAST:event_addMoneyButtonActionPerformed

    private void productCodeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productCodeInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productCodeInputActionPerformed

    private void productCodeInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productCodeInputKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(!productCodeInput.getText().equals("")){
                try{
                    long productCode = Long.parseLong(productCodeInput.getText());
                    if(productCode == 23232323){
                        finishSale();
                        return;
                    }
                    if(MainPanel.getProductManager().isProduct(productCode)){
                        if(actualProducts.containsKey(productCode)){
                            SaleProduct saleProduct = actualProducts.get(productCode);
                            saleProduct.setAmount(saleProduct.getAmount()+1);
                        }else{
                            SaleProduct saleProduct = MainPanel.getProductManager().getProduct(productCode).getSaleProduct(1);
                            actualProducts.put(productCode, saleProduct);
                        }
                        clearInput();
                        loadTable();
                    }else{
                        JLabel label = new JLabel("Debe ingresar un código de producto válido.");
                        label.setFont(new Font("Arial", Font.BOLD, 20));
                        JOptionPane.showMessageDialog(this, label);
                        clearInput();
                    }
                }catch(Exception e){
                    JLabel label = new JLabel("Debe ingresar un código de producto válido.");
                    label.setFont(new Font("Arial", Font.BOLD, 20));
                    JOptionPane.showMessageDialog(this, label);
                    clearInput();
                }
            }else{
                JLabel label = new JLabel("Debe ingresar un código de producto válido.");
                label.setFont(new Font("Arial", Font.BOLD, 20));
                JOptionPane.showMessageDialog(this, label);
                clearInput();
            }
        }
    }//GEN-LAST:event_productCodeInputKeyPressed

    private void finishCheckOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishCheckOutButtonActionPerformed
        // TODO add your handling code here:
        try{
            finishSale();
        }catch(Exception ignored){}
    }//GEN-LAST:event_finishCheckOutButtonActionPerformed

    private void clearCheckOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCheckOutButtonActionPerformed
        // TODO add your handling code here:
        actualProducts.clear();
        loadTable();
    }//GEN-LAST:event_clearCheckOutButtonActionPerformed

    private void addMoneyManual(){
        try{
            JLabel descriptionInputLabel = new JLabel("<html>Ingrese el NOMBRE del producto<html>");
            descriptionInputLabel.setFont(new Font("Arial", Font.BOLD, 20));
            String descriptionInput = JOptionPane.showInputDialog(descriptionInputLabel);
            if(descriptionInput == null){
                return;
            }
            JLabel priceInputLabel = new JLabel("<html>Ingrese el VALOR del producto<html>");
            priceInputLabel.setFont(new Font("Arial", Font.BOLD, 20));
            String priceInput = JOptionPane.showInputDialog(priceInputLabel);
            if(priceInput == null){
                return;
            }
            int price = Integer.parseInt(priceInput);
            SaleProduct saleProduct = new SaleProduct(descriptionInput, manualMoneyIndex, 1, price);
            actualProducts.put((long) manualMoneyIndex, saleProduct);
            manualMoneyIndex++;
            clearInput();
            loadTable();
        }catch(Exception e){
            JLabel label = new JLabel("Debe ingresar un código de producto válido.");
            label.setFont(new Font("Arial", Font.BOLD, 20));
            JOptionPane.showMessageDialog(this, label);
            clearInput();
        }
    }

    private int manualMoneyIndex = 0;

    private void finishSale() throws IOException{
        Sale sale = new Sale(new ArrayList<>(actualProducts.values()), Date.from(Instant.now()), MainPanel.getSaleManager().getNewerSaleId());
        openCheckOut(sale);
        clearInput();
    }

    private int calculateTotalPrice(){
        int totalPrice = 0;
        for(SaleProduct saleProduct : actualProducts.values()){
            totalPrice += saleProduct.getParcialPrice();
        }
        return totalPrice;
    }

    private void openCheckOut(Sale sale) throws IOException{
        String price = String.format("%,d", sale.getTotalPrice());
        JLabel label = new JLabel("<html>Ingrese el método de pago<br/><br/>El valor total de la compra es de $"+price+"<html>");
        label.setFont(new Font("Arial", Font.BOLD, 20));
        String[] options = {"Efectivo", "Débito", "Crédito"};
        String n = (String)JOptionPane.showInputDialog(null, label, "Caja", JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        if(n == null){
            return;
        }
        switch(n){
            case "Efectivo":{
                JLabel paymentInputLabel = new JLabel("<html>Ingrese el monto recibido<br/>El pago mínimo debe ser de $"+price+"<html>");
                paymentInputLabel.setFont(new Font("Arial", Font.BOLD, 20));
                String paymentInput = JOptionPane.showInputDialog(paymentInputLabel);
                if(paymentInput == null){
                    return;
                }
                int payment = Integer.parseInt(paymentInput);
                if(payment >= sale.getTotalPrice()){
                    String surplus = String.format("%,d", payment-sale.getTotalPrice());
                    JLabel surplusLabel = new JLabel("<html>Debe darle al cliente $"+surplus+"<html>");
                    surplusLabel.setFont(new Font("Arial", Font.BOLD, 20));
                    int save = JOptionPane.showConfirmDialog(this, surplusLabel);
                    if(save == 0){
                        sale.setPaymentMethod("Efectivo");
                        sale.setPayment(payment);
                        MainPanel.getSaleManager().saveSale(sale);
                        actualProducts.clear();
                        loadTable();
                        Date date = Date.from(Instant.now());
                        DecimalFormat df = new DecimalFormat("00");
                        String printable = "Venta: Nº"+sale.getId()+"\nEmisión: "+df.format(date.getDate())+"/"+df.format(date.getMonth()+1)+"/"+(date.getYear()+1900)+" "+df.format(date.getHours())+":"+df.format(date.getMinutes())+"\n\n===============================";
                        for(SaleProduct saleProduct : sale.getProducts()){
                            if(MainPanel.getProductManager().isProduct(saleProduct.getCode())){
                                Product product = MainPanel.getProductManager().getProduct(saleProduct.getCode());
                                int finalStock = product.getStock()-saleProduct.getAmount();
                                if(finalStock < 0){
                                    finalStock = 0;
                                }
                                product.setStock(finalStock);
                                MainPanel.getProductManager().saveProduct(product);

                            }
                            printable = printable+"\n"+saleProduct.getAmount()+"*"+saleProduct.getDescription()+" $"+saleProduct.getParcialPrice();
                        }
                        printable = printable+"\n===============================\n\nTotal: $"+sale.getTotalPrice()+"\nPago: $"+sale.getPayment()+"\nVuelto: $"+String.valueOf(sale.getPayment()-sale.getTotalPrice());
                        PrintRequestAttributeSet att = new HashPrintRequestAttributeSet();
                        att.add(new MediaPrintableArea(0,0,58,420,MediaSize.MM));
                        JTextArea t2 = new JTextArea();
                        t2.setText(printable);
                        t2.setFont(new Font("Arial", Font.PLAIN, 10));
                        t2.setBackground(Color.white);
                        try {
                            t2.print(null, null, true, null, att, true);
                        } catch (java.awt.print.PrinterException ex) {
                            ex.printStackTrace();
                        }
                    }
                }else{
                    JLabel insufficent = new JLabel("<html>El monto abonado es insuficiente.<br/>El pago mínimo debe ser de $"+price+"<html>");
                    insufficent.setFont(new Font("Arial", Font.BOLD, 20));
                    JOptionPane.showMessageDialog(this, insufficent);
                    openCheckOut(sale);
                }
                break;
            }
            case "Débito":{

                break;
            }
            case "Crédito":{

                break;
            }
        }
    }

    private void loadTable(){
        String price = String.format("%,d", calculateTotalPrice());
        totalCostText.setText("Costo total: $"+price);
        DefaultTableModel model = (DefaultTableModel) productsTable.getModel();
        model.setRowCount(0);
        for(SaleProduct product : actualProducts.values()){
            model.addRow(new Object[]{product.getCode(), product.getDescription(), product.getAmount(), product.getPrice(), product.getParcialPrice()});
        }
    }

    private void clearInput(){
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                productCodeInput.setText("");
            }
        }, 1);
    }

    private void removeProduct(){
        JLabel codeInputLabel = new JLabel("<html>Ingrese el CÓDIGO del producto<html>");
        codeInputLabel.setFont(new Font("Arial", Font.BOLD, 20));
        String codeInput = JOptionPane.showInputDialog(codeInputLabel);
        if(codeInput == null){
            return;
        }
        try{
            long productCode = Long.parseLong(codeInput);
            if(actualProducts.containsKey(productCode)){
                actualProducts.remove(productCode);
                loadTable();
            }else{
                JLabel label = new JLabel("El código de producto ingresado no se encuentra en la lista");
                label.setFont(new Font("Arial", Font.BOLD, 20));
                JOptionPane.showMessageDialog(this, label);
            removeProduct();
            }
        }catch(Exception e){
            JLabel label = new JLabel("Debe ingresar un valor válido.");
            label.setFont(new Font("Arial", Font.BOLD, 20));
            JOptionPane.showMessageDialog(this, label);
            removeProduct();
        }
    }

    private HashMap<Long, SaleProduct> actualProducts = new HashMap<>();
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckOutPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckOutPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckOutPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckOutPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckOutPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMoneyButton;
    private javax.swing.JButton clearCheckOutButton;
    private javax.swing.JButton finishCheckOutButton;
    private javax.swing.JButton goBackButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField productCodeInput;
    private javax.swing.JLabel productCodeText;
    private javax.swing.JTable productsTable;
    private javax.swing.JButton removeProductButton;
    private javax.swing.JLabel totalCostText;
    // End of variables declaration//GEN-END:variables
}

